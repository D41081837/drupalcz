{#
/**
 * @file
 * Bootstrap Paragraphs template for displaying Bootstrap Tabs.
 *
 * Available variables:
 * - paragraph: Full paragraph entity.
 *   - id: The paragraph ID.
 *   - bundle: The type of the paragraph, for example, "image" or "text".
 *   - authorid: The user ID of the paragraph author.
 *   - createdtime: Formatted creation date. Preprocess functions can
 *     reformat it by calling format_date() with the desired parameters on
 *     $variables['paragraph']->getCreatedTime().
 * - content: All paragraph items. Use {{ content }} to print them all,
 *   or print a subset such as {{ content.field_example }}. Use
 *   {{ content|without('field_example') }} to temporarily suppress the printing
 *   of a given child element.
 * - attributes: HTML attributes for the containing element.
 *   The attributes.class element may contain one or more of the following
 *   classes:
 *   - paragraphs: The current template type (also known as a "theming hook").
 *   - paragraphs--type-[type]: The current paragraphs type. For example, if the paragraph is an
 *     "Image" it would result in "paragraphs--type--image". Note that the machine
 *     name will often be in a short form of the human readable label.
 *   - paragraphs--view-mode--[view_mode]: The View Mode of the paragraph; for example, a
 *     preview would result in: "paragraphs--view-mode--preview", and
 *     default: "paragraphs--view-mode--default".
 * - view_mode: View mode; for example, "preview" or "full".
 * - logged_in: Flag for authenticated user status. Will be true when the
 *   current user is a logged-in member.
 * - is_admin: Flag for admin user status. Will be true when the current user
 *   is an administrator.
 *
 * @see template_preprocess_paragraph()
 *
 * @ingroup themeable
 */
#}

{# The template default set classes. #}
{%
  set classes = [
  'paragraph',
  'paragraph--type--' ~ paragraph.bundle|clean_class,
  view_mode ? 'paragraph--view-mode--' ~ view_mode|clean_class,
]
%}

{# Sets Unique ID for Tab from Paragraph ID. #}
{% set paragraph_id = 'tabs-' ~ paragraph.id.value %}

{# Prints Tabs template. #}
<div{{ attributes.addClass(classes).setAttribute('id', paragraph_id) }} role="tablist">
  {{ title_suffix }}
  <div class="paragraph-content">
    {% block content %}
      {{ content|without('field_taby') }}
    {% endblock %}

    <ul class="tab" role="tablist">
      {# Loops through the tab sections to print the tab section titles. #}
      {% for key, item in content.field_taby if key|first != '#' %}
        <li role="presentation"><a class="tablink {% if loop.first %}active{% endif %}" href="#" data-tab-id="tab-{{ paragraph_id }}-{{ key }}" aria-controls="{{ item['#paragraph'].field_p_title.value }}" role="tab">{{ item['#paragraph'].field_p_title.value }}</a></li>
      {% endfor %}
    </ul>
    <div class="tab-content">
      {# Loops through the tab sections again to print the tab section bodies. #}
      {% for key, item in content.field_taby if key|first != '#' %}
        <div role="tabpanel" class="tab-pane{% if loop.first %} active{% endif %}" id="tab-{{ paragraph_id }}-{{ key }}">
          {% for body_key, body_item in item['#paragraph'].field_p_content %}
            {# Use the same render array as item and set the '#paragraph'. #}
            {% set tab_body = item %}
            {# Load the entity for the current translation #}
            {% set tab_body = tab_body|merge({'#paragraph': tab_body['#paragraph'].field_p_content[body_key].entity.getTranslation(tab_body['#paragraph'].langcode[0].value)}) %}
            {# Remove the cache keys so it doesn't repeat the first value. #}
            {% set tab_body = tab_body|merge({'#cache': {}}) %}
            {# Print the compiled section body. #}
            {{ tab_body }}
          {% endfor %}
        </div>
      {% endfor %}
    </div>
  </div>
</div>
