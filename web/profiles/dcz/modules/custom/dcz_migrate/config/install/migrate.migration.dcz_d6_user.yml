# A "migration" is, in technical terms, a configuration entity which describes
# how to read source data, process it (generally by mapping source fields to
# destination fields), and write it to Drupal.

# The machine name for a migration, used to uniquely identify it.
id: dcz_d6_user

# A human-friendly description of the migration.
label: Migrate user accounts from D6 DB.

migration_tags:
  - Drupal 6

# The machine name of the group containing this migration (which contains
# shared configuration to be merged with our own configuration here).
migration_group: dcz6

# Every migration must have a source plugin, which controls the delivery of our
# source data. In this case, our source plugin has the name "beer_term", which
# Drupal resolves to the PHP class defined in
# src/Plugin/migrate/source/BeerTerm.php.
source:
  plugin: dcz_d6_user

# Here's the meat of the migration - the processing pipeline. This describes how
# each destination field is to be populated based on the source data. For each
# destination field, one or more process plugins may be invoked.
process:
  uid: uid
  name: name
  pass: pass
  mail: mail
  created: created
  access: access
  login: login
  status: status
  timezone:
    plugin: user_update_7002
    source: timezone
  preferred_langcode: language
  init: init
#  roles:
#    plugin: migration
#    migration: d6_user_role
#    source: roles
  user_picture:
    plugin: migration
    migration: d6_user_picture_file
    source: uid
  # Custom fields.
  field_dcz_name: dcz6_name
  field_dcz_surname: dcz6_surname
  field_dcz_pos_lat: dcz6_lat
  field_dcz_pos_long: dcz6_long
  'field_dcz_bio/value': dcz6_bio_value

#migration_dependencies:
#  required:
#    - d6_user_role
#  optional:
#    - d6_user_picture_file
#    - user_picture_entity_display
#    - user_picture_entity_form_display

# Every migration must also have a destination plugin, which handles writing
# the migrated data in the appropriate form for that particular kind of data.
# Most Drupal content is an "entity" of one type or another, and we need to
# specify what entity type we are populating (in this case, taxonomy terms).
# Unlike the source plugin (which is specific to our particular scenario), this
# destination plugin is implemented in Drupal itself.
destination:
  plugin: entity:user
  md5_passwords: true
